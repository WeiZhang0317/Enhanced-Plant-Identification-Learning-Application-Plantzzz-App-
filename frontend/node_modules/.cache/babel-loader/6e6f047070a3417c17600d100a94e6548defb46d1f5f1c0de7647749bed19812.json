{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fernanda\\\\Documents\\\\GitHub\\\\plantzzz\\\\frontend\\\\src\\\\contexts\\\\UserContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Creating a context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext();\n\n// Custom hook for easy context usage\nexport const useUserContext = () => {\n  _s();\n  return useContext(UserContext);\n};\n_s(useUserContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const UserProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(() => {\n    // Trying to get user data from local storage upon initial load\n    const savedUser = localStorage.getItem('user');\n    return savedUser ? JSON.parse(savedUser) : null;\n  });\n\n  // Effect hook to update localStorage when the user state changes\n  useEffect(() => {\n    if (user) {\n      localStorage.setItem('user', JSON.stringify(user));\n    } else {\n      localStorage.removeItem('user');\n    }\n  }, [user]);\n\n  // Login function to set user state\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/user/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) throw new Error('Login failed');\n      const data = await response.json();\n      setUser({\n        username: data.username,\n        userType: data.userType,\n        email\n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      throw error; // Propagating error to be handled where login function is called\n    }\n  };\n\n  // Logout function to clear user state\n  const logout = async () => {\n    // Here you can also add a call to the backend to invalidate the session/token\n    setUser(null); // Clear user from context\n  };\n\n  // Providing state and updater functions to the rest of your app\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n_s2(UserProvider, \"yWj2erehxvClYYYb8bcaKuXfnv0=\");\n_c = UserProvider;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","UserContext","useUserContext","_s","UserProvider","children","_s2","user","setUser","savedUser","localStorage","getItem","JSON","parse","setItem","stringify","removeItem","login","email","password","response","fetch","method","headers","body","ok","Error","data","json","username","userType","error","console","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Fernanda/Documents/GitHub/plantzzz/frontend/src/contexts/UserContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\n// Creating a context\r\nconst UserContext = createContext();\r\n\r\n// Custom hook for easy context usage\r\nexport const useUserContext = () => useContext(UserContext);\r\n\r\nexport const UserProvider = ({ children }) => {\r\n    const [user, setUser] = useState(() => {\r\n        // Trying to get user data from local storage upon initial load\r\n        const savedUser = localStorage.getItem('user');\r\n        return savedUser ? JSON.parse(savedUser) : null;\r\n    });\r\n\r\n    // Effect hook to update localStorage when the user state changes\r\n    useEffect(() => {\r\n        if (user) {\r\n            localStorage.setItem('user', JSON.stringify(user));\r\n        } else {\r\n            localStorage.removeItem('user');\r\n        }\r\n    }, [user]);\r\n\r\n    // Login function to set user state\r\n    const login = async (email, password) => {\r\n        try {\r\n            const response = await fetch('http://localhost:5000/user/login', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ email, password }),\r\n            });\r\n\r\n            if (!response.ok) throw new Error('Login failed');\r\n            \r\n            const data = await response.json();\r\n            setUser({ username: data.username, userType: data.userType, email });  \r\n        } catch (error) {\r\n            console.error(\"Login error:\", error);\r\n            throw error; // Propagating error to be handled where login function is called\r\n        }\r\n    };\r\n\r\n    // Logout function to clear user state\r\n    const logout = async () => {\r\n        // Here you can also add a call to the backend to invalidate the session/token\r\n        setUser(null); // Clear user from context\r\n    };\r\n\r\n    // Providing state and updater functions to the rest of your app\r\n    return (\r\n        <UserContext.Provider value={{ user, login, logout }}>\r\n            {children}\r\n        </UserContext.Provider>\r\n    );\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMO,cAAc,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMP,UAAU,CAACK,WAAW,CAAC;AAAA;AAACE,EAAA,CAA/CD,cAAc;AAE3B,OAAO,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC1C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,MAAM;IACnC;IACA,MAAMY,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC9C,OAAOF,SAAS,GAAGG,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC,GAAG,IAAI;EACnD,CAAC,CAAC;;EAEF;EACAX,SAAS,CAAC,MAAM;IACZ,IAAIS,IAAI,EAAE;MACNG,YAAY,CAACI,OAAO,CAAC,MAAM,EAAEF,IAAI,CAACG,SAAS,CAACR,IAAI,CAAC,CAAC;IACtD,CAAC,MAAM;MACHG,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC;IACnC;EACJ,CAAC,EAAE,CAACT,IAAI,CAAC,CAAC;;EAEV;EACA,MAAMU,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACrC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;QAC7DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEZ,IAAI,CAACG,SAAS,CAAC;UAAEG,KAAK;UAAEC;QAAS,CAAC;MAC5C,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACK,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;MAEjD,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClCpB,OAAO,CAAC;QAAEqB,QAAQ,EAAEF,IAAI,CAACE,QAAQ;QAAEC,QAAQ,EAAEH,IAAI,CAACG,QAAQ;QAAEZ;MAAM,CAAC,CAAC;IACxE,CAAC,CAAC,OAAOa,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,MAAMA,KAAK,CAAC,CAAC;IACjB;EACJ,CAAC;;EAED;EACA,MAAME,MAAM,GAAG,MAAAA,CAAA,KAAY;IACvB;IACAzB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;EACnB,CAAC;;EAED;EACA,oBACIR,OAAA,CAACC,WAAW,CAACiC,QAAQ;IAACC,KAAK,EAAE;MAAE5B,IAAI;MAAEU,KAAK;MAAEgB;IAAO,CAAE;IAAA5B,QAAA,EAChDA;EAAQ;IAAA+B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAACjC,GAAA,CAjDWF,YAAY;AAAAoC,EAAA,GAAZpC,YAAY;AAAA,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}